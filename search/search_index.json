{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Sindri began as a tool specifically for managing a modded Valheim server in a container. As such, it's name originated from Norse mythology.</p> <p>Since then, it has grown into a more generalized form as a toolkit for turning Steam app servers into container images--modded or otherwise. While it still boasts a tool that is an especially helpful wrapper around the Valheim server, it also includes container images for other game's Steam app servers as well as other tools to support efforts building minimal container images for any Steam app servers.</p> <p>These tools include:</p> <ul> <li><code>boiler</code>, a read-only container registry for pulling images with Steam apps pre-installed on them on-demand.</li> <li><code>valheimw</code>, a container image containing a wrapper around the Valheim server that manages its mods via thunderstore.io and runs an HTTP server alongside it to provide additional functionality.</li> <li><code>corekeeper</code>, a container image containing the Core Keeper server.</li> <li><code>mist</code>, a CLI tool for use in <code>Dockerfile</code>s to install Steam apps, Steam Workshop items, and thunderstore.io mods.</li> </ul>"},{"location":"boiler/","title":"Boiler","text":"<p><code>boiler</code> is Sindri's crown jewel. Inspired by Nixery, it is a read-only container registry for pulling images with Steam apps pre-installed on them. The base of the images is <code>debian:stable-slim</code>. Images are non-root and <code>steamcmd</code> is never installed on them, so there's no leftover files from it on the image's filesystem or in its layers. Images are built on-demand rather than being stored, waiting to be pulled.</p> <p>The image's name refers to a Steam app ID. Check out SteamDB to find your Steam app ID if you do not already know it.</p> <p>The image's tag maps to the Steam app's branch, except the specific case of the default tag \"latest\" which maps to the default Steam app branch \"public\".</p> <p>Layers and manifests are cached after being pulled via tag so that subsequent pulls via digest will function and be snappy. Subsequent pulls via tag will cause <code>boiler</code> to rebuild the container image to check if a new build has been released on the given branch. Such pulls are still faster than the first, especially if a new build has not been released because no cacheing would need to be done.</p> <p>Often, additional layers need added on top of what <code>boiler</code> provides. This is because Steam apps sometimes have entrypoints that are non-configurable without editing files that they provide and frequently have additional system dependencies that need to be installed (maintaining a database of such additional layers for use by <code>boiler</code> to automatically fix its container images would be cool, and I am open to the idea).</p> <p>There is currently no public instance of <code>boiler</code> (although I am open to the idea), so you must run your own. Thankfully, doing so is easy.</p> <p>Taking the Valheim server as an example of how <code>boiler</code> could be used, consider a directory with the following <code>docker-compose.yml</code>:</p> <pre><code>services:\n  boiler:\n    image: ghcr.io/frantjc/boiler\n    ports:\n      - 5000:5000\n  valheim:\n    # The default tag is \"latest\" which gets mapped to the Steam app branch\n    # \"public\". \"896660\" refers to the Steam app ID of the Valheim server.\n    # \n    image: localhost:5000/896660\n    # start_server_xterm.sh just execs start_server.sh with xterm,\n    # so avoid the extra dependency on xterm by directly execing\n    # start_server.sh.\n    entrypoint:\n      - /home/boil/steamapp/start_server.sh\n    ports:\n      - 2456:2456/udp\n    depends_on:\n      - boiler\n</code></pre> <p>First, run <code>boiler</code> in the background. We will use it to pre-build a container image with the Valheim server installed:</p> <pre><code>docker compose up --detach boiler\n</code></pre> <p>Next, build and run the Valheim server. This will pull a minimal container image with it pre-installed from <code>boiler</code>:</p> <pre><code>docker compose up --detach valheim\n</code></pre> <p>When this command is ran, <code>docker</code> will pull the Valheim server container image by making a series of HTTP requests to the <code>boiler</code> ran in the previous step. To satisfy those HTTP requests, <code>boiler</code> will download <code>steamcmd</code> and use it to build and cache the various manifests and blobs of the container image. As a result, the pull can take some time, especially on the first run when <code>boiler</code> has not cached <code>steamcmd</code> or the Steam app. After the pull is complete, the Valheim server will run.</p>"},{"location":"corekeeper/","title":"Core Keeper","text":"<p>Sindri has a pre-built container image for the Core Keeper server for my own use because, unlike Docker, Kubernetes does not support building container images, only running them.</p> <p>This container image gets built using <code>boiler</code> and takes care of installing the Core Keeper server's additional dependencies, smoothing out some of its quirks and ensuring that it does not run as root.</p> <p>Consider a directory with the following <code>docker-compose.yml</code>:</p> <pre><code>services:\n  corekeeper:\n    image: ghcr.io/frantjc/corekeeper\n    volumes:\n      - ./save:/home/boil/.config/unity3d/Pugstorm/Core Keeper/DedicatedServer\n</code></pre> <p>This <code>docker-compose.yml</code> runs the Core Keeper server. To use it, place it in a directory and run the following command there:</p> <pre><code>docker compose up\n</code></pre> <p>If Core Keeper errors with <code>Segmentation fault (core dumped)</code>, you have likely ran into a permissions issue. Run <code>chmod -R 777 ./hack</code> and try again.</p> <p>The server's save data will be stored in <code>./save</code>.</p> <p>Notably, the Core Keeper server does not any ports exposed, instead using magic to connect players to the server.</p> <p>Once the container finishes starting up, the game ID will be in its logs and can be used to connect to the server.</p>"},{"location":"mist/","title":"Mist","text":"<p><code>mist</code> is a CLI tool for use in <code>Dockerfile</code>s to install Steam apps, Steam Workshop items, and thunderstore.io mods. It uses GoCloud's URL concept to expose installing the content from the different sources using a similar command.</p> <p>The following <code>Dockerfile</code> builds a container image for a modded Valheim server and provides an excellent example for how to use <code>mist</code>:</p> <pre><code>FROM debian:stable-slim\nCOPY --from=ghcr.io/frantjc/mist /mist /usr/local/bin\nRUN apt-get update -y \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n        # So that mist can make a trusted TLS connection\n        # to download `steamcmd`.\n        ca-certificates \\\n        # `mist` installs `steamcmd`, but we still have to\n        # satisfy `steamcmd`'s dependencies.\n        lib32gcc-s1 \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n    # Install the Valheim server to /root/valheim.\n    # \"896660\" refers to the Steam app ID of the Valheim server.\n    &amp;&amp; mist steamapp://896660 /root/valheim \\\n    # Install BepInEx to /root/valheim.\n    &amp;&amp; mist thunderstore://denikson/BepInExPack_Valheim /root/valheim \\\n    # Install EquipmentAndQuickSlots to /root/valheim/BepInEx/plugins.\n    &amp;&amp; mist thunderstore://RandyKnapp/EquipmentAndQuickSlots /root/valheim/BepInEx/plugins \\\n    # Cleanup.\n    &amp;&amp; mist --clean \\\n    &amp;&amp; rm /usr/local/bin/mist \\\n    &amp;&amp; apt-get remove -y \\\n        ca-certificates \\\n        lib32gcc-s1\nWORKDIR /root/valheim/\nENTRYPOINT [\"/root/valheim/start_server.sh\"]\n</code></pre>"},{"location":"palworld/","title":"Palworld","text":"<p>Sindri provides no special support for the Palworld server beyond this document describing how one could use Sindri to build and run the Palworld server in a container.</p> <p>Consider a directory with the following <code>docker-compose.yml</code> and <code>Dockerfile</code>:</p> <pre><code>services:\n  boiler:\n    image: ghcr.io/frantjc/boiler\n    ports:\n      - 5000:5000\n  palworld:\n    build: .\n    ports:\n      - 8211:8211/udp\n    depends_on:\n      - boiler\n</code></pre> <pre><code>FROM localhost:5000/2394010\nUSER root\nRUN apt-get update -y \\\n    &amp;&amp; apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        xdg-utils \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n    &amp;&amp; apt-get clean\nUSER boil\n</code></pre> <p>\"2394010\" refers to the Steam app ID of the Palworld server.</p> <p>To run the Palworld server this way, run the following commands in the directory that the above files are placed in.</p> <p>First, run <code>boiler</code> in the background. We will use it to pre-build a container image with the Palworld server installed:</p> <pre><code>docker compose up --detach boiler\n</code></pre> <p>Next, build and run the Palworld server. This will pull a minimal container image with it pre-installed from <code>boiler</code>, install extra dependencies via the <code>Dockerfile</code> and then run the Palworld server container:</p> <pre><code>docker compose up --detach palworld\n</code></pre> <p>Finally, <code>boiler</code> can be stopped:</p> <pre><code>docker compose down boiler\n</code></pre>"},{"location":"valheim/","title":"Valheim","text":"<p>Sindri boasts special support for Valheim among other Steam app servers due to its origins.</p>"},{"location":"valheim/#valheimw","title":"<code>valheimw</code>","text":"<p>This special supports comes in the form of <code>valheimw</code>, a Valheim server **w**rapper. Instead of being a Steam app server that Sindri can help build into a container image, <code>valheimw</code> is a pre-built tool specifically for Valheim servers, modded or otherwise. If mods are specified, it uses BepInEx to load them.</p> <p>It provides additional features beyond that in an HTTP server that it runs alongside the Valheim server, including:</p> <ul> <li>Download a tarball of the mods in use to distribute them to other players.</li> <li>Download the world's <code>.db</code> and <code>.fwl</code> files.</li> <li>Get information from the world's <code>.fwl</code> file, parsed on your behalf.</li> <li>Go to the world's valheim-map.world page.</li> </ul> <p>For an example of how to use <code>valheimw</code>, consider a directory with the following <code>docker-compose.yml</code>:</p> <pre><code>services:\n  valheimw:\n    image: ghcr.io/frantjc/valheimw\n    command:\n      # The name of the Valheim server's save files.\n      # If they already exist, it will load them. If\n      # they do not, it will create them.\n      # Optional. Default \"sindri\".\n      # - --world=hello\n      # The name of the Valheim server as a player would\n      # see it in-game when connecting to it.\n      # Optional. Default \"sindri\".\n      # - --name=there\n      # Can be specified if you want to run a\n      # pre-release version of the Valheim server.\n      # Optional.\n      # - --beta=public-test\n      # - --beta-password=yesimadebackups\n      # Browse https://valheim.thunderstore.io/ for available mods.\n      # Names are case-sensitive.\n      # Optional.\n      # - --mod=RandyKnapp/EquipmentAndQuickSlots\n    environment:\n      # The password you will use to connect to your server.\n      # Required. Must be at least 5 characters, and cannot\n      # be contained within your world name. Default world name\n      # is \"sindri\".\n      VALHEIM_PASSWORD: hellothere\n    volumes:\n      # `valheimw` caches stuff here and the Valheim server's\n      # save data is here by default.\n      - ./save:/home/valheimw/.cache\n    ports:\n      # Expose the Valheim server's port.\n      # If you change the Valheim server's port from its default,\n      # via `--port`, ensure that this is changed to match.\n      - 2456:2456/udp\n      # Expose `valheimw`'s HTTP server's port.\n      # If you change `valheimw`'s HTTP server's port from its default,\n      # via `--addr`, ensure that this is changed to match.\n      - 8080:8080\n</code></pre> <p>To run the <code>valheimw</code> this way, run the following command in the directory that the above file is placed in.</p> <pre><code>docker compose up\n</code></pre> <p>Once <code>valheimw</code> is running, its helpful HTTP server can be used.</p> <p>To get the world's seed, run the following:</p> <pre><code>curl http://localhost:8080/seed.txt\n</code></pre> <p>To go to the world's valheim-map.world page, open localhost:8080/map.</p> <p>To download the mods that the Valheim server is using (if any), run the following command:</p> <pre><code>curl http://localhost:8080/mods.gz | tar -xzf-\n</code></pre> <p>To see an exhaustive list of arguments for <code>valheimw</code>, see the following or run the help command yourself:</p> <pre><code>docker run ghcr.io/frantjc/valheimw --help\n</code></pre> <pre><code>Usage:\n  valheimw [flags]\n\nFlags:\n      --addr string              address (default \":8080\")\n      --admin int64Slice         Valheim server admin Steam IDs (default [])\n      --backup-long duration     Valheim server -backuplong duration\n      --backup-short duration    Valheim server -backupshort duration\n      --backups int              Valheim server -backup amount\n      --ban int64Slice           Valheim server banned Steam IDs (default [])\n      --beta string              Steam beta branch\n      --beta-password string     Steam beta password\n      --combat-modifier          Valheim server -modifier combat\n      --crossplay                Valheim server enable -crossplay\n      --death-penalty-modifier   Valheim server -modifier deathpenalty\n  -h, --help                     help for valheimw\n      --instance-id string       Valheim server -instanceid\n  -m, --mod stringArray          Thunderstore mods (case-sensitive)\n      --name string              Valheim server -name (default \"sindri\")\n      --no-build-cost            Valheim server -setkey nobuildcost\n      --no-db                    do not expose the world .db file for download\n      --no-fwl                   do not expose the world .fwl file information\n      --no-map                   Valheim server -setkey nomap\n      --passive-mobs             Valheim server -setkey passivemobs\n      --permit int64Slice        Valheim server permitted Steam IDs (default [])\n      --player-events            Valheim server -setkey playerevents\n      --port int                 Valheim server -port (0 to use default)\n      --portal-modifier          Valheim server -modifier portals\n      --preset                   Valheim server -preset\n      --public                   Valheim server make -public\n      --raid-modifier            Valheim server -modifier raids\n      --resource-modifier        Valheim server -modifier resources\n      --save-interval duration   Valheim server -saveinterval duration\n      --savedir string           Valheim server -savedir (default \"/home/valheimw/.cache/sindri/valheim\")\n  -V, --verbose count            verbosity\n  -v, --version                  version for valheimw\n      --world string             Valheim server -world (default \"sindri\")\n</code></pre>"},{"location":"valheim/#if-you-dont-want-to-use-valheimw","title":"If you don't want to use <code>valheimw</code>...","text":"<p><code>boiler</code> is able to help.</p>"}]}